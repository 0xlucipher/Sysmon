<#
.SYNOPSIS
    Generate a custom Sysmon configuration by merging selected modules.

.DESCRIPTION
    This script merges technique modules, category modules, and exclusion modules
    into a single deployable Sysmon configuration file.

.PARAMETER TechniqueModules
    Array of technique IDs to include (e.g., @("T1003","T1055","T1021"))

.PARAMETER CategoryModules
    Array of event category IDs to include (e.g., @("01","03","10","13"))

.PARAMETER ExclusionModules
    Array of exclusion module names (e.g., @("global","microsoft","common_software"))

.PARAMETER OutputPath
    Path for the generated configuration file

.PARAMETER Profile
    Use a pre-defined profile: minimal, balanced, comprehensive, forensics

.PARAMETER IncludeCompliance
    Include compliance modules (PCI, HIPAA, NIST)

.EXAMPLE
    .\Generate-ModularConfig.ps1 -Profile balanced -OutputPath "my-config.xml"

.EXAMPLE
    .\Generate-ModularConfig.ps1 `
        -TechniqueModules @("T1003","T1055","T1021") `
        -CategoryModules @("01","03","10") `
        -ExclusionModules @("global","microsoft") `
        -OutputPath "custom-config.xml"

.NOTES
    Version: 1.0.0
    Author: Sysmon Ultimate Configuration Project
#>

[CmdletBinding(DefaultParameterSetName='Custom')]
param(
    [Parameter(ParameterSetName='Custom')]
    [string[]]$TechniqueModules = @(),

    [Parameter(ParameterSetName='Custom')]
    [string[]]$CategoryModules = @(),

    [Parameter(ParameterSetName='Custom')]
    [string[]]$ExclusionModules = @(),

    [Parameter(ParameterSetName='Profile')]
    [ValidateSet('minimal','balanced','comprehensive','forensics')]
    [string]$Profile,

    [Parameter(Mandatory=$true)]
    [string]$OutputPath,

    [switch]$IncludeCompliance
)

$ErrorActionPreference = 'Stop'

Write-Host "`n===============================================" -ForegroundColor Cyan
Write-Host "   SYSMON MODULAR CONFIG GENERATOR" -ForegroundColor Cyan
Write-Host "===============================================`n" -ForegroundColor Cyan

# Define base paths
$scriptPath = $PSScriptRoot
$modulesPath = Join-Path (Split-Path $scriptPath -Parent) "configurations\modules"
$techniquesPath = Join-Path $modulesPath "techniques"
$categoriesPath = Join-Path $modulesPath "categories"
$exclusionsPath = Join-Path $modulesPath "exclusions"
$compliancePath = Join-Path $modulesPath "compliance"

# Profile definitions
$profileConfigs = @{
    'minimal' = @{
        Techniques = @('T1003','T1055')
        Categories = @('01','10')
        Exclusions = @('global','microsoft')
    }
    'balanced' = @{
        Techniques = @('T1003','T1055','T1021','T1047','T1053','T1059')
        Categories = @('01','03','10','13')
        Exclusions = @('global','microsoft','common_software')
    }
    'comprehensive' = @{
        Techniques = @('T1003','T1055','T1021','T1047','T1053','T1059')
        Categories = @('01','03','07','10','11','13','22')
        Exclusions = @('global','microsoft')
    }
    'forensics' = @{
        Techniques = @('T1003','T1055','T1021','T1047','T1053','T1059')
        Categories = @('01','02','03','05','07','08','09','10','11','12','13','14','15','17','18','19','20','21','22','23','25')
        Exclusions = @()
    }
}

# Apply profile if specified
if ($Profile) {
    Write-Host "Using profile: $Profile" -ForegroundColor Yellow
    $config = $profileConfigs[$Profile]
    $TechniqueModules = $config.Techniques
    $CategoryModules = $config.Categories
    $ExclusionModules = $config.Exclusions
}

Write-Host "Configuration:" -ForegroundColor Cyan
Write-Host "  Technique modules: $($TechniqueModules.Count)" -ForegroundColor White
Write-Host "  Category modules: $($CategoryModules.Count)" -ForegroundColor White
Write-Host "  Exclusion modules: $($ExclusionModules.Count)" -ForegroundColor White
Write-Host ""

# Start building the configuration
$xmlBuilder = [System.Text.StringBuilder]::new()
[void]$xmlBuilder.AppendLine('<Sysmon schemaversion="4.90">')
[void]$xmlBuilder.AppendLine('<!--')
[void]$xmlBuilder.AppendLine("  Generated by Generate-ModularConfig.ps1")
[void]$xmlBuilder.AppendLine("  Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')")
if ($Profile) {
    [void]$xmlBuilder.AppendLine("  Profile: $Profile")
}
[void]$xmlBuilder.AppendLine("  Technique modules: $($TechniqueModules -join ', ')")
[void]$xmlBuilder.AppendLine("  Category modules: $($CategoryModules -join ', ')")
[void]$xmlBuilder.AppendLine("  Exclusion modules: $($ExclusionModules -join ', ')")
[void]$xmlBuilder.AppendLine('-->')
[void]$xmlBuilder.AppendLine('')
[void]$xmlBuilder.AppendLine('  <HashAlgorithms>SHA256,IMPHASH</HashAlgorithms>')
[void]$xmlBuilder.AppendLine('  <CheckRevocation/>')
[void]$xmlBuilder.AppendLine('  <DnsLookup>False</DnsLookup>')
[void]$xmlBuilder.AppendLine('')
[void]$xmlBuilder.AppendLine('  <EventFiltering>')
[void]$xmlBuilder.AppendLine('')

# Function to extract EventFiltering content from module
function Get-ModuleContent {
    param([string]$FilePath)

    if (-not (Test-Path $FilePath)) {
        Write-Host "  WARNING: Module not found: $FilePath" -ForegroundColor Yellow
        return $null
    }

    try {
        [xml]$moduleXml = Get-Content $FilePath -Raw

        # Extract RuleGroup elements
        $eventFiltering = $moduleXml.Sysmon.EventFiltering
        if ($eventFiltering) {
            # Get the inner XML (everything inside EventFiltering)
            return $eventFiltering.InnerXml
        }

        return $null
    } catch {
        Write-Host "  ERROR: Failed to parse $FilePath : $_" -ForegroundColor Red
        return $null
    }
}

# Merge technique modules
if ($TechniqueModules.Count -gt 0) {
    Write-Host "Merging technique modules..." -ForegroundColor Yellow

    [void]$xmlBuilder.AppendLine('    <!-- ========================================')
    [void]$xmlBuilder.AppendLine('         TECHNIQUE MODULES')
    [void]$xmlBuilder.AppendLine('         ======================================== -->')
    [void]$xmlBuilder.AppendLine('')

    foreach ($technique in $TechniqueModules) {
        $modulePath = Join-Path $techniquesPath "$technique*.xml"
        $moduleFile = Get-Item $modulePath -ErrorAction SilentlyContinue | Select-Object -First 1

        if ($moduleFile) {
            Write-Host "  + Including: $($moduleFile.Name)" -ForegroundColor Green
            $content = Get-ModuleContent -FilePath $moduleFile.FullName
            if ($content) {
                [void]$xmlBuilder.AppendLine("    <!-- Module: $($moduleFile.Name) -->")
                [void]$xmlBuilder.AppendLine($content)
                [void]$xmlBuilder.AppendLine('')
            }
        } else {
            Write-Host "  ! Technique module not found: $technique" -ForegroundColor Yellow
        }
    }
}

# Merge category modules
if ($CategoryModules.Count -gt 0) {
    Write-Host "Merging category modules..." -ForegroundColor Yellow

    [void]$xmlBuilder.AppendLine('    <!-- ========================================')
    [void]$xmlBuilder.AppendLine('         CATEGORY MODULES')
    [void]$xmlBuilder.AppendLine('         ======================================== -->')
    [void]$xmlBuilder.AppendLine('')

    foreach ($category in $CategoryModules) {
        $modulePath = Join-Path $categoriesPath "$category*.xml"
        $moduleFile = Get-Item $modulePath -ErrorAction SilentlyContinue | Select-Object -First 1

        if ($moduleFile) {
            Write-Host "  + Including: $($moduleFile.Name)" -ForegroundColor Green
            $content = Get-ModuleContent -FilePath $moduleFile.FullName
            if ($content) {
                [void]$xmlBuilder.AppendLine("    <!-- Module: $($moduleFile.Name) -->")
                [void]$xmlBuilder.AppendLine($content)
                [void]$xmlBuilder.AppendLine('')
            }
        } else {
            Write-Host "  ! Category module not found: $category" -ForegroundColor Yellow
        }
    }
}

# Merge exclusion modules
if ($ExclusionModules.Count -gt 0) {
    Write-Host "Merging exclusion modules..." -ForegroundColor Yellow

    [void]$xmlBuilder.AppendLine('    <!-- ========================================')
    [void]$xmlBuilder.AppendLine('         EXCLUSION MODULES')
    [void]$xmlBuilder.AppendLine('         ======================================== -->')
    [void]$xmlBuilder.AppendLine('')

    foreach ($exclusion in $ExclusionModules) {
        $modulePath = Join-Path $exclusionsPath "$exclusion*.xml"
        $moduleFile = Get-Item $modulePath -ErrorAction SilentlyContinue | Select-Object -First 1

        if ($moduleFile) {
            Write-Host "  + Including: $($moduleFile.Name)" -ForegroundColor Green
            $content = Get-ModuleContent -FilePath $moduleFile.FullName
            if ($content) {
                [void]$xmlBuilder.AppendLine("    <!-- Module: $($moduleFile.Name) -->")
                [void]$xmlBuilder.AppendLine($content)
                [void]$xmlBuilder.AppendLine('')
            }
        } else {
            Write-Host "  ! Exclusion module not found: $exclusion" -ForegroundColor Yellow
        }
    }
}

# Add minimal baseline rules if no modules included
if ($TechniqueModules.Count -eq 0 -and $CategoryModules.Count -eq 0) {
    Write-Host "No modules specified - adding minimal baseline" -ForegroundColor Yellow

    [void]$xmlBuilder.AppendLine('    <!-- Minimal baseline rules -->')
    [void]$xmlBuilder.AppendLine('    <RuleGroup name="Baseline_Minimal" groupRelation="or">')
    [void]$xmlBuilder.AppendLine('      <ProcessAccess onmatch="include">')
    [void]$xmlBuilder.AppendLine('        <TargetImage condition="end with">\lsass.exe</TargetImage>')
    [void]$xmlBuilder.AppendLine('      </ProcessAccess>')
    [void]$xmlBuilder.AppendLine('      <WmiEvent onmatch="include"/>')
    [void]$xmlBuilder.AppendLine('      <SysmonStatus onmatch="include"/>')
    [void]$xmlBuilder.AppendLine('      <ProcessTampering onmatch="include"/>')
    [void]$xmlBuilder.AppendLine('    </RuleGroup>')
    [void]$xmlBuilder.AppendLine('')
}

# Close EventFiltering and Sysmon
[void]$xmlBuilder.AppendLine('  </EventFiltering>')
[void]$xmlBuilder.AppendLine('')
[void]$xmlBuilder.AppendLine('</Sysmon>')

# Write to file
try {
    $xmlContent = $xmlBuilder.ToString()

    # Validate XML before writing
    try {
        [xml]$testXml = $xmlContent
        Write-Host "`n✓ XML validation passed" -ForegroundColor Green
    } catch {
        Write-Host "`n✗ XML validation failed: $_" -ForegroundColor Red
        Write-Host "Configuration may be invalid. Saving anyway..." -ForegroundColor Yellow
    }

    $xmlContent | Out-File -FilePath $OutputPath -Encoding UTF8
    Write-Host "✓ Configuration saved to: $OutputPath" -ForegroundColor Green

    # Show statistics
    $stats = @{
        Lines = ($xmlContent -split "`n").Count
        RuleGroups = ([regex]::Matches($xmlContent, '<RuleGroup')).Count
        Rules = ([regex]::Matches($xmlContent, '<Rule ')).Count
    }

    Write-Host "`nStatistics:" -ForegroundColor Cyan
    Write-Host "  Lines: $($stats.Lines)" -ForegroundColor White
    Write-Host "  RuleGroups: $($stats.RuleGroups)" -ForegroundColor White
    Write-Host "  Rules: $($stats.Rules)" -ForegroundColor White

    Write-Host "`nNext steps:" -ForegroundColor Cyan
    Write-Host "  1. Validate: .\testing\Validate-Configuration.ps1 -ConfigPath '$OutputPath'" -ForegroundColor White
    Write-Host "  2. Deploy:   .\deployment\Install-Sysmon.ps1 -ConfigPath '$OutputPath'" -ForegroundColor White

} catch {
    Write-Host "`nERROR: Failed to write configuration: $_" -ForegroundColor Red
    exit 1
}

Write-Host ""
